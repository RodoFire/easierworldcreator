plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.8.1"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
    mavenCentral()
}
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
            exclude(['src/main/generated/**'])
        }
    }
}

tasks.test {
    enabled = false
}

loom {
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=mushrooomsmod"

            runDir "build/datagen"
        }
    }
    accessWidenerPath = file("src/main/resources/easierworldcreator.accesswidener")
}
dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modApi "com.terraformersmc:modmenu:11.0.1"
    include 'com.moandjiezana.toml:toml4j:0.7.2'
    implementation 'com.moandjiezana.toml:toml4j:0.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    withJavadocJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(remapSourcesJar.archiveFile, javadocJar.archiveFile)

    changelog = file("changelog.md").text
    type = STABLE
    modLoaders.add("fabric")
    modLoaders.add("quilt")

    displayName = "ewc ${project.mod_version}"

    curseforge {
        accessToken = getApiKey()["CURSEFORGE_API_KEY"]
        projectId = "1069458"
        minecraftVersions.add("1.21.1")
        javaVersions.add(JavaVersion.VERSION_21)
        serverRequired = true
        requires("fabric-api")
        changelogType = "markdown"
    }

    modrinth {
        accessToken = getApiKey()["MODRINTH_API_KEY"]
        projectId = "Ut6vTr1q"
        minecraftVersions.add("1.21.1")
        requires("fabric-api")
    }

    github {
        accessToken = getApiKey()["GITHUB_API_KEY"]
        repository = "RodoFire/easierworldcreator"
        commitish = "1.21.1"
    }
}

static def getApiKey() {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('api.properties')))
    return props
}